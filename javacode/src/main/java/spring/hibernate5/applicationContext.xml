<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:sca="http://www.springframework.org/schema/sca"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/sca http://www.springframework.org/schema/sca/spring-sca.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
          <property name="maxTotal" value="10"></property>
          <property name="maxIdle" value="10" />
<!--           <property name="maxWait" value="100" />
 -->      
 	      <property name="maxWaitMillis" value="1500" />    
 		  <property name="testOnBorrow" value="true" />
          <property name="testOnReturn" value="true" />
     </bean>

<!--      <bean id="jedisInfo" class="redis.clients.jedis.JedisShardInfo">
          <constructor-arg index="0" value="10.11.132.204" />
          <constructor-arg index="1" value="7777" />
          <constructor-arg index="2" value="redisname" />
     </bean>
     
     <bean id="jedisPool" class="redis.clients.jedis.ShardedJedisPool">
          <constructor-arg index="0" ref="jedisPoolConfig" />
          <constructor-arg index="1">
               <list>
                    <ref bean="jedisInfo" />
               </list>
          </constructor-arg>
     </bean> -->

    <bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"  
        p:host-name="10.11.132.204" p:port="7777" p:pool-config-ref="jedisPoolConfig"/>  
      
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">  
        <property name="connectionFactory"   ref="connectionFactory" />  
    </bean> 

	<!-- 配置数据源信息 online:10.10.18.31 service_center/yK5+nq1p7KM1mEd test:10.10.77.43 umsManager/daYfs5F -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<!-- 数据库连接参数 -->
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url"
			value="jdbc:mysql://10.16.41.116:3306/ugc56videos?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;zeroDateTimeBehavior=convertToNull" />
		<property name="username" value="ugc56writea" />
		<property name="password" value="l0mi3jdquie5" />
		<!-- 初始化连接数 -->
		<property name="initialSize" value="3" />
		<!-- 最大连接数 -->
		<property name="maxActive" value="5" />
		<!-- 最小空闲连接 -->
		<property name="minIdle" value="1" />
		<!-- 最大空闲连接 -->
		<property name="maxIdle" value="2" />
		<!-- 超时时间（以秒为单位） -->
		<property name="removeAbandonedTimeout" value="180" />
		<!-- 超时等待时间（以毫秒为单位） -->
		<property name="maxWait" value="10000" />
		<!-- 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="true" />
		<!-- 是否在自动回收超时连接的时候打印连接的超时错误 -->
		<property name="logAbandoned" value="true" />
		<!-- 测试连接是否正常 -->
		<property name="validationQuery" value="select 1 from dual"/>
		<property name="defaultAutoCommit" value="true" />
	</bean>
	
		<!-- SessionFactory配置 -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="packagesToScan"><!-- 这里指定hibernate要扫描的包用以找出所有的模型 -->
			<list>
				<value>com.uhos.ccm.heart.model</value>
			</list>
		</property>
		<property name="hibernateProperties">  
            <props>  
                <prop key="hibernate.format_sql">true</prop>  
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>  
                <prop key="hibernate.id.new_generator_mappings">false</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>  
                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
 				<prop key="hibernate.connection.autocommit">true</prop>
				<prop key="connection.autocommit">true</prop>
             </props>
        </property>
	</bean>
	
		<!-- 事务管理的Annotation配置 -->
	<tx:annotation-driven transaction-manager="txManager" />
	<bean id="txManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
<!-- 	<bean id="dao" class="com.uhos.ccm.heart.dao.BaseDao">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> -->
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="hibernateTemplate"
          class="org.springframework.orm.hibernate5.HibernateTemplate"
          p:sessionFactory-ref="sessionFactory"/>
          
<!--      <bean id="parentDao" class="com.uhos.ccm.heart.dao.ParentDao" abstract="true">
    	<property name="sessionFactory" ref="sessionFactory" />
    </bean> -->
    
<!--     <bean id="serverService" class="com.uhos.ccm.heart.service.ServerService" parent="parentDao"></bean>
    <bean id="commandJobService" class="com.uhos.ccm.heart.service.CommandJobService" parent="parentDao"></bean> -->
    

    <!-- transaction manager, use JtaTransactionManager for global tx -->
<!--     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>  -->
    
<!--     <bean id="beatServer" class="com.uhos.ccm.heart.BeatServer">
    	<property name="serverService" ref="serverService"></property>
    </bean> -->

	<!-- Scans for @Repository, @Service and @Component -->
	<!-- <context:component-scan base-package="com.uhos" /> -->
	
	<!-- enable autowire -->
    <!-- <context:annotation-config /> -->
    
	<task:executor id="executor" pool-size="5" />  
	<task:scheduler id="scheduler" pool-size="10" />  
	<task:annotation-driven executor="executor" scheduler="scheduler" />


    <!-- enable transaction demarcation with annotations 
    <tx:annotation-driven /> -->
	
<!--   	<tx:advice transaction-manager="transactionManager" id="txAdvice">
	    <tx:attributes>
	        <tx:method name="get*" read-only="true"/>
	        <tx:method name="find*" read-only="true"/>
	        <tx:method name="count*" read-only="true"/>
	        <tx:method name="*" />
	    </tx:attributes>
	</tx:advice>
	
	<aop:config>
	    <aop:pointcut expression="execution(* com.uhos.ccm.heart.service.*.*(..))" id="txPointCut"/>
	    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut"/>
	</aop:config>
  	<aop:aspectj-autoproxy proxy-target-class="false"/> -->
</beans>
